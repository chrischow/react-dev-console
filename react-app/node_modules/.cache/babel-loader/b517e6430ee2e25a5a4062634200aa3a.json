{"ast":null,"code":"var _jsxFileName = \"/home/chrischow/repos/react-dev-console/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.Log = console.log;\n\nfunction CellOutput(props) {\n  var outputs = ''; // Overwrite console.log\n\n  console.log = function () {\n    var args = Array.prototype.slice.call(arguments);\n\n    for (var i = 0; i < args.length; i++) {\n      if (typeof args[i] === 'string') {\n        outputs = outputs + args[i];\n      } else {\n        outputs = outputs + JSON.stringify(args[i]);\n      }\n\n      if (i < args.length - 1) {\n        outputs = outputs + ' ';\n      }\n    }\n\n    return outputs;\n  };\n\n  if (props.cell) {\n    try {\n      var commandOutput = eval(props.cell);\n\n      if (!commandOutput) {\n        commandOutput = 'null';\n      }\n\n      if (typeof commandOutput === 'string') {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: commandOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 16\n        }, this);\n      } else {\n        var allText = JSON.stringify(commandOutput, null, 2);\n        var allTextNodes = allText.split('\\n').map(function (textNode) {\n          return /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: textNode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 18\n          }, this);\n        });\n        return allTextNodes;\n      }\n    } catch (err) {\n      var errorLines = err.stack.split('\\n');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: errorLines[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Unknown error.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n}\n\n_c = CellOutput;\n\nfunction Cell(props) {\n  _s();\n\n  // Initialise states: `form` for controlled form and `cell` for cell value\n  const [cell, setCell] = React.useState('');\n  const [form, setForm] = React.useState({\n    commands: ''\n  });\n\n  function handleChange(event) {\n    setForm(prevForm => {\n      return { ...prevForm,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n\n  function runCell() {\n    setCell(form.commands);\n  } // Set up listener - run after every render\n\n\n  React.useEffect(function () {\n    $('#cell-' + props.id).keydown(function (e) {\n      // Tab\n      if (e.keyCode === 9) {\n        e.preventDefault(); // var start = this.selectionStart;\n        // var end = this.selectionEnd;\n        // // set textarea value to: text before caret + tab + text after caret\n        // this.value = this.value.substring(0, start) + \"  \" + this.value.substring(end);\n        // // put caret at right position again\n        // this.selectionStart = this.selectionEnd = start + 1;\n      } // Ctrl + Enter: Run\n\n\n      if (e.ctrlKey && e.keyCode === 13) {\n        $('#cell-' + props.id + '-play').click();\n      }\n    });\n    $('#cell-' + props.id).on('input', function () {\n      this.style.height = \"\";\n      this.style.height = this.scrollHeight + \"px\";\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell-div mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: 'cell-' + props.id,\n          className: \"form-control\",\n          name: \"commands\",\n          value: form.commands,\n          onChange: handleChange,\n          rows: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"play-button-div\",\n        id: 'cell-' + props.id + '-play',\n        onClick: runCell,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"play-button\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 384 512\",\n          role: \"img\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"currentcolor\",\n            d: \"M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361  296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0  449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21  29.99 73.03 39.04L361 215z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), cell && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msg\",\n      children: /*#__PURE__*/_jsxDEV(CellOutput, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Cell, \"akfJbb8VW5Tg6YpM4W5lXy2AWAs=\");\n\n_c2 = Cell;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"React Dev Console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center mb-4\",\n      children: \"A workaround console for debugging your code in a tool-less environment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cell, {\n      id: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-5 mb-5\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-sm btn-blue\",\n        children: \"Add Cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CellOutput\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/chrischow/repos/react-dev-console/src/App.js"],"names":["React","$","console","Log","log","CellOutput","props","outputs","args","Array","prototype","slice","call","arguments","i","length","JSON","stringify","cell","commandOutput","eval","allText","allTextNodes","split","map","textNode","err","errorLines","stack","Cell","setCell","useState","form","setForm","commands","handleChange","event","prevForm","target","name","value","runCell","useEffect","id","keydown","e","keyCode","preventDefault","ctrlKey","click","on","style","height","scrollHeight","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\n\nconsole.Log = console.log;\n\nfunction CellOutput(props) {\n  var outputs = '';\n  // Overwrite console.log\n  console.log = function() {\n    var args = Array.prototype.slice.call(arguments);\n    for (var i=0; i<args.length; i++) {\n      if (typeof args[i] === 'string') {\n        outputs = outputs + args[i]\n      } else {\n        outputs = outputs + JSON.stringify(args[i]);\n      }\n\n      if (i < args.length-1) {\n        outputs = outputs + ' ';\n      }\n    }\n    return outputs\n  };\n\n  if (props.cell) {\n    try {\n      var commandOutput = eval(props.cell);\n\n      if (!commandOutput) {\n        commandOutput = 'null';\n      }\n\n      if (typeof commandOutput === 'string') {\n        return <div>{commandOutput}</div>;\n      } else {\n        var allText = JSON.stringify(commandOutput, null, 2);\n        var allTextNodes = allText.split('\\n').map(function(textNode) {\n          return <pre>{textNode}</pre>;\n        });\n        return allTextNodes;\n      }\n    } catch(err){\n      var errorLines = err.stack.split('\\n');\n      return <div className=\"error\">{errorLines[0]}</div>;\n    }\n  }\n  return <div>Unknown error.</div>;\n}\n\nfunction Cell(props) {\n  // Initialise states: `form` for controlled form and `cell` for cell value\n  const [cell, setCell] = React.useState('');\n  const [form, setForm] = React.useState({\n    commands: ''\n  });\n\n  function handleChange(event) {\n    setForm(prevForm => {\n      return {\n        ...prevForm,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n\n  function runCell() {\n    setCell(form.commands)\n  }\n\n  // Set up listener - run after every render\n  React.useEffect(function() {\n    $('#cell-' + props.id).keydown(function(e) {\n      // Tab\n      if (e.keyCode === 9) {\n        e.preventDefault();\n        // var start = this.selectionStart;\n        // var end = this.selectionEnd;\n\n        // // set textarea value to: text before caret + tab + text after caret\n        // this.value = this.value.substring(0, start) + \"  \" + this.value.substring(end);\n\n        // // put caret at right position again\n        // this.selectionStart = this.selectionEnd = start + 1;\n      }\n\n      // Ctrl + Enter: Run\n      if (e.ctrlKey && (e.keyCode === 13)) {\n        $('#cell-' + props.id + '-play').click();\n      }\n    });\n\n    $('#cell-' + props.id).on('input', function () {\n      this.style.height = \"\";\n      this.style.height = this.scrollHeight + \"px\";\n    });\n  });\n\n  return (\n    <div>\n      <div className=\"cell-div mb-3\">\n        <form className=\"form\">\n          <textarea\n            id={'cell-' + props.id}\n            className=\"form-control\"\n            name=\"commands\"\n            value={form.commands}\n            onChange={handleChange}\n            rows=\"3\"\n          >\n          </textarea>\n        </form>\n        <div className=\"play-button-div\" id={'cell-' + props.id + '-play'} onClick={runCell}>\n          <svg className=\"play-button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" role=\"img\">\n            <path \n              fill=\"currentcolor\"\n              d=\"M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 \n              296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 \n              449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 \n              29.99 73.03 39.04L361 215z\"\n            />\n          </svg>\n        </div>\n      </div>\n        {cell && <div className=\"msg\">\n          <CellOutput cell={cell} />\n        </div>}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"container mt-4\">\n      <h1 className=\"text-center\">React Dev Console</h1>\n      <p className=\"text-center mb-4\">\n        A workaround console for debugging your code in a tool-less environment.\n      </p>\n      <Cell id=\"1\" />\n      <div className=\"text-center mt-5 mb-5\">\n        <button className=\"btn btn-sm btn-blue\">Add Cell</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}